package emailvalidator_test

import (
	"fmt"
	"testing"

	"github.com/88labs/go-utils/emailvalidator"
)

func TestIsValid(t *testing.T) {
	t.Run("valid", func(t *testing.T) {
		t.Parallel()
		emails := []string{
			"include-&-ampersand@valid-characters-in-local.dev",
			"include-*-asterisk@valid-characters-in-local.dev",
			"include-`-backtick@valid-characters-in-local.dev",
			"include-{-braceleft@valid-characters-in-local.dev",
			"include-}-braceright@valid-characters-in-local.dev",
			"include-^-caret@valid-characters-in-local.dev",
			"include-$-dollar@valid-characters-in-local.dev",
			"include-=-equals@valid-characters-in-local.dev",
			"include-!-exclaim@valid-characters-in-local.dev",
			"include-#-hash@valid-characters-in-local.dev",
			"include---hyphen@valid-characters-in-local.dev",
			"include-%-percent@valid-characters-in-local.dev",
			"include-+-plus@valid-characters-in-local.dev",
			"include-|-pipe@valid-characters-in-local.dev",
			"include-?-question@valid-characters-in-local.dev",
			"include-\"-quotedouble@valid-characters-in-local.dev",
			"include-'-quotesingle@valid-characters-in-local.dev",
			"include-/-slash@valid-characters-in-local.dev",
			"include-~-tilde@valid-characters-in-local.dev",
			"include-_-underscore@valid-characters-in-local.dev",
			"include-.-dot@valid-characters-in-local.dev",
			"&start-with-ampersand@valid-characters-in-local.dev",
			"*start-with-asterisk@valid-characters-in-local.dev",
			"`start-with-backtick@valid-characters-in-local.dev",
			"{start-with-braceleft@valid-characters-in-local.dev",
			"}start-with-braceright@valid-characters-in-local.dev",
			"^start-with-caret@valid-characters-in-local.dev",
			"$start-with-dollar@valid-characters-in-local.dev",
			"=start-with-equals@valid-characters-in-local.dev",
			"!start-with-exclaim@valid-characters-in-local.dev",
			"#start-with-hash@valid-characters-in-local.dev",
			"-start-with-hyphen@valid-characters-in-local.dev",
			"%start-with-percent@valid-characters-in-local.dev",
			"+start-with-plus@valid-characters-in-local.dev",
			"|start-with-pipe@valid-characters-in-local.dev",
			"?start-with-question@valid-characters-in-local.dev",
			"\"start-with-quotedouble@valid-characters-in-local.dev",
			"'start-with-quotesingle@valid-characters-in-local.dev",
			"/start-with-slash@valid-characters-in-local.dev",
			"~start-with-tilde@valid-characters-in-local.dev",
			"_start-with-underscore@valid-characters-in-local.dev",
			"end-with-ampersand-&@valid-characters-in-local.dev",
			"end-with-asterisk-*@valid-characters-in-local.dev",
			"end-with-backtick-`@valid-characters-in-local.dev",
			"end-with-braceleft-{@valid-characters-in-local.dev",
			"end-with-braceright-}@valid-characters-in-local.dev",
			"end-with-caret-^@valid-characters-in-local.dev",
			"end-with-dollar-$@valid-characters-in-local.dev",
			"end-with-equals-=@valid-characters-in-local.dev",
			"end-with-exclaim-!@valid-characters-in-local.dev",
			"end-with-hash-#@valid-characters-in-local.dev",
			"end-with-hyphen--@valid-characters-in-local.dev",
			"end-with-percent-%@valid-characters-in-local.dev",
			"end-with-plus-+@valid-characters-in-local.dev",
			"end-with-pipe-|@valid-characters-in-local.dev",
			"end-with-question-?@valid-characters-in-local.dev",
			"end-with-quotedouble-\"@valid-characters-in-local.dev",
			"end-with-quotesingle-'@valid-characters-in-local.dev",
			"end-with-slash-/@valid-characters-in-local.dev",
			"end-with-tilde-~@valid-characters-in-local.dev",
			"end-with-underscore-_@valid-characters-in-local.dev",
			"a+b@plus-in-local.com",
			"a_b@underscore-in-local.com",
			"user@example.com",
			"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ@letters-in-local.dev",
			"01234567890@numbers-in-local.dev",
			"a@single-character-in-local.dev",
			"one-character-third-level@a.example.com",
			"single-character-in-sld@x.dev",
			"local@dash-in-sld.com",
			"numbers-in-sld@s123.com",
			"one-letter-sld@x.dev",
			"uncommon-tld@sld.museum",
			"uncommon-tld@sld.travel",
			"uncommon-tld@sld.mobi",
			"country-code-tld@sld.uk",
			"country-code-tld@sld.rw",
			"local@sld.newTLD",
			"local@sub.domains.com",
			"aaa@bbb.co.jp",
			"nigel.worthington@big.co.uk",
			"f@c.com",
			"f@s.c",
			"someuser@somehost.somedomain",
			"mixed-1234-in-{+^}-local@sld.dev",
			"partially.\"quoted\"@sld.com",
			"areallylongnameaasdfasdfasdfasdf@asdfasdfasdfasdfasdf.ab.cd.ef.gh.co.ca",
			"john.doe@2020.example.com",
			"john.doe@2a.com",
			"john.doe@a2.com",
			"john.doe@2020.a-z.com",
			"john.doe@2020.a2z.com",
			"john.doe@2020.12345a6789.com",
			"jonh.doe@163.com",
			"test@xn--umlut-ira.com",
			// ip address email
			"bracketed-IP@[127.0.0.1]",
			"bracketed-and-labeled-IPv6@[IPv6:abcd:ef01:1234:5678:9abc:def0:1234:5678]",
			// host only email
			"f@s",
			"user@localhost",
			"someuser@somehost",
			// numeric domain email
			"only-numbers-in-domain-label@sub.123.custom",
			// local part only email
			"user-&-ampersand-name",
			"user-*-asterisk-name",
			"user-`-backtick-name",
			"user-{-braceleft-name",
			"user-}-braceright-name",
			"user-^-caret-name",
			"user-$-dollar-name",
			"user-=-equals-name",
			"user-!-exclaim-name",
			"user-#-hash-name",
			"user---hyphen-name",
			"user-%-percent-name",
			"user-+-plus-name",
			"user-|-pipe-name",
			"user-?-question-name",
			"user-\"-quotedouble-name",
			"user-'-quotesingle-name",
			"user-/-slash-name",
			"user-~-tilde-name",
			"user-_-underscore-name",
			"user-.-dot-name",
			"&-start-with-ampersand-user",
			"*-start-with-asterisk-user",
			"`-start-with-backtick-user",
			"{-start-with-braceleft-user",
			"}-start-with-braceright-user",
			"^-start-with-caret-user",
			"$-start-with-dollar-user",
			"=-start-with-equals-user",
			"!-start-with-exclaim-user",
			"#-start-with-hash-user",
			"--start-with-hyphen-user",
			"%-start-with-percent-user",
			"+-start-with-plus-user",
			"|-start-with-pipe-user",
			"?-start-with-question-user",
			"\"-start-with-quotedouble-user",
			"'-start-with-quotesingle-user",
			"/-start-with-slash-user",
			"~-start-with-tilde-user",
			"_-start-with-underscore-user",
			"end-with-ampersand-&",
			"end-with-asterisk-*",
			"end-with-backtick-`",
			"end-with-braceleft-{",
			"end-with-braceright-}",
			"end-with-caret-^",
			"end-with-dollar-$",
			"end-with-equals-=",
			"end-with-exclaim-!",
			"end-with-hash-#",
			"end-with-hyphen--",
			"end-with-percent-%",
			"end-with-plus-+",
			"end-with-pipe-|",
			"end-with-question-?",
			"end-with-quotedouble-\"",
			"end-with-quotesingle-'",
			"end-with-slash-/",
			"end-with-tilde-~",
			"end-with-underscore-_",
			"user",
		}

		for _, email := range emails {
			t.Run(email, func(t *testing.T) {
				t.Parallel()
				res := emailvalidator.IsValid(email)
				if !res {
					t.Errorf("IsValidRFC() = %v, want true, email = %s", res, email)
				}
			})
		}
	})

	t.Run("invalid", func(t *testing.T) {
		t.Parallel()
		emails := []string{
			"include-@-at@invalid-characters-in-local.dev",
			"start-with-backslash@\\invalid-characters-in-domain.dev",
			"start-with-braketleft@[invalid-characters-in-domain.dev",
			"start-with-braketright@]invalid-characters-in-domain.dev",
			"start-with-colon@:invalid-characters-in-domain.dev",
			"start-with-comma@,invalid-characters-in-domain.dev",
			"start-with-greater@>invalid-characters-in-domain.dev",
			"start-with-lesser@<invalid-characters-in-domain.dev",
			"start-with-parenleft@(invalid-characters-in-domain.dev",
			"start-with-parenright@)invalid-characters-in-domain.dev",
			"start-with-semicolon@;invalid-characters-in-domain.dev",
			"start-with-ampersand@&invalid-characters-in-domain.dev",
			"start-with-asterisk@*invalid-characters-in-domain.dev",
			"start-with-backtick@`invalid-characters-in-domain.dev",
			"start-with-braceleft@{invalid-characters-in-domain.dev",
			"start-with-braceright@}invalid-characters-in-domain.dev",
			"start-with-caret@^invalid-characters-in-domain.dev",
			"start-with-dollar@$invalid-characters-in-domain.dev",
			"start-with-equals@=invalid-characters-in-domain.dev",
			"start-with-exclaim@!invalid-characters-in-domain.dev",
			"start-with-hash@#invalid-characters-in-domain.dev",
			"start-with-hyphen@-invalid-characters-in-domain.dev",
			"start-with-percent@%invalid-characters-in-domain.dev",
			"start-with-plus@+invalid-characters-in-domain.dev",
			"start-with-pipe@|invalid-characters-in-domain.dev",
			"start-with-question@?invalid-characters-in-domain.dev",
			"start-with-quotedouble@\"invalid-characters-in-domain.dev",
			"start-with-quotesingle@'invalid-characters-in-domain.dev",
			"start-with-slash@/invalid-characters-in-domain.dev",
			"start-with-tilde@~invalid-characters-in-domain.dev",
			"start-with-underscore@_invalid-characters-in-domain.dev",
			"end-with-backslash@invalid-characters-in-domain\\.dev",
			"end-with-braketleft@invalid-characters-in-domain[.dev",
			"end-with-braketright@invalid-characters-in-domain].dev",
			"end-with-colon@invalid-characters-in-domain:.dev",
			"end-with-comma@invalid-characters-in-domain,.dev",
			"end-with-greater@invalid-characters-in-domain>.dev",
			"end-with-lesser@invalid-characters-in-domain<.dev",
			"end-with-parenleft@invalid-characters-in-domain(.dev",
			"end-with-parenright@invalid-characters-in-domain).dev",
			"end-with-semicolon@invalid-characters-in-domain;.dev",
			"end-with-ampersand@invalid-characters-in-domain&.dev",
			"end-with-asterisk@invalid-characters-in-domain*.dev",
			"end-with-backtick@invalid-characters-in-domain`.dev",
			"end-with-braceleft@invalid-characters-in-domain{.dev",
			"end-with-braceright@invalid-characters-in-domain}.dev",
			"end-with-caret@invalid-characters-in-domain^.dev",
			"end-with-dollar@invalid-characters-in-domain$.dev",
			"end-with-equals@invalid-characters-in-domain=.dev",
			"end-with-exclaim@invalid-characters-in-domain!.dev",
			"end-with-hash@invalid-characters-in-domain#.dev",
			"end-with-hyphen@invalid-characters-in-domain-.dev",
			"end-with-percent@invalid-characters-in-domain%.dev",
			"end-with-plus@invalid-characters-in-domain+.dev",
			"end-with-pipe@invalid-characters-in-domain|.dev",
			"end-with-question@invalid-characters-in-domain?.dev",
			"end-with-quotedouble@invalid-characters-in-domain\".dev",
			"end-with-quotesingle@invalid-characters-in-domain'.dev",
			"end-with-slash@invalid-characters-in-domain/.dev",
			"end-with-tilde@invalid-characters-in-domain~.dev",
			"end-with-underscore@invalid-characters-in-domain_.dev",
			"include-backslash@invalid-characters-\\-in-domain.dev",
			"include-braketleft@invalid-characters-[-in-domain.dev",
			"include-braketright@invalid-characters-]-in-domain.dev",
			"include-colon@invalid-characters-:-in-domain.dev",
			"include-comma@invalid-characters-,-in-domain.dev",
			"include-greater@invalid-characters->-in-domain.dev",
			"include-lesser@invalid-characters-<-in-domain.dev",
			"include-parenleft@invalid-characters-(-in-domain.dev",
			"include-parenright@invalid-characters-)-in-domain.dev",
			"include-semicolon@invalid-characters-;-in-domain.dev",
			"include-ampersand@invalid-characters-&-in-domain.dev",
			"include-asterisk@invalid-characters-*-in-domain.dev",
			"include-backtick@invalid-characters-`-in-domain.dev",
			"include-braceleft@invalid-characters-{-in-domain.dev",
			"include-braceright@invalid-characters-}-in-domain.dev",
			"include-caret@invalid-characters-^-in-domain.dev",
			"include-dollar@invalid-characters-$-in-domain.dev",
			"include-equals@invalid-characters-=-in-domain.dev",
			"include-exclaim@invalid-characters-!-in-domain.dev",
			"include-hash@invalid-characters-#-in-domain.dev",
			"include-percent@invalid-characters-%-in-domain.dev",
			"include-plus@invalid-characters-+-in-domain.dev",
			"include-pipe@invalid-characters-|-in-domain.dev",
			"include-question@invalid-characters-?-in-domain.dev",
			"include-quotedouble@invalid-characters-\"-in-domain.dev",
			"include-quotesingle@invalid-characters-'-in-domain.dev",
			"include-slash@invalid-characters-/-in-domain.dev",
			"include-tilde@invalid-characters-~-in-domain.dev",
			"include-underscore@invalid-characters-_-in-domain.dev",
			"test@example.com@example.com",
			"missing-sld@.com",
			"missing-tld@sld.",
			"unbracketed-IPv6@abcd:ef01:1234:5678:9abc:def0:1234:5678",
			"unbracketed-and-labled-IPv6@IPv6:abcd:ef01:1234:5678:9abc:def0:1234:5678",
			"bracketed-and-unlabeled-IPv6@[abcd:ef01:1234:5678:9abc:def0:1234:5678]",
			"unbracketed-IPv4@127.0.0.1",
			"invalid-IPv4@127.0.0.1.26",
			"another-invalid-IPv4@127.0.0.256",
			"IPv4-and-port@127.0.0.1:25",
			"host-beginning-with-dot@.example.com",
			"domain-beginning-with-dash@-example.com",
			"domain-ending-with-dash@example-.com",
			"the-local-part-is-invalid-if-it-is-longer-than-sixty-four-characters@sld.dev",
			"domain-too-long@t.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo.long",
			"user@example.com<script>alert('hello')</script>",
			// whitespace in parts
			"include-\n-newline@invalid-characters-in-local.dev",
			"include-\t-tab@invalid-characters-in-local.dev",
			"include-\r-carriage_return@invalid-characters-in-local.dev",
			"include- -space@invalid-characters-in-local.dev",
			"foo @bar.com",
			"foo\t@bar.com",
			"foo\n@bar.com",
			"foo\r@bar.com",
			"test@ example.com",
			"user@example .com",
			"user@example\t.com",
			"user@example\n.com",
			"user@example\r.com",
			"user@exam ple.com",
			"user@exam\tple.com",
			"user@exam\nple.com",
			"user@exam\rple.com",
			"us er@example.com",
			"us\ter@example.com",
			"us\ner@example.com",
			"us\rer@example.com",
			"user@example.com\n<script>alert('hello')</script>",
			"user@example.com\t<script>alert('hello')</script>",
			"user@example.com\r<script>alert('hello')</script>",
			"user@example.com <script>alert('hello')</script>",
			" leading-whitespace@example.com",
			"trailing-whitespace@example.com ",
			" leading-and-trailing-whitespace@example.com ",
			" user-with-leading-whitespace-space@example.com",
			"\tuser-with-leading-whitespace-tab@example.com",
			"\n        user-with-leading-whitespace-newline@example.com",
			"domain-with-trailing-whitespace-space@example.com ",
			"domain-with-trailing-whitespace-tab@example.com\t",
			"domain-with-trailing-whitespace-newline@example.com\n        ",
			// missing
			"",
			"@bar.com",
			"test@",
			"@missing-local.dev",
			// strictly invalid emails
			"include-\\-backslash@invalid-characters-in-local.dev",
			"include-[-braketleft@invalid-characters-in-local.dev",
			"include-]-braketright@invalid-characters-in-local.dev",
			"include-:-colon@invalid-characters-in-local.dev",
			"include-,-comma@invalid-characters-in-local.dev",
			"include->-greater@invalid-characters-in-local.dev",
			"include-<-lesser@invalid-characters-in-local.dev",
			"include-(-parenleft@invalid-characters-in-local.dev",
			"include-)-parenright@invalid-characters-in-local.dev",
			"include-;-semicolon@invalid-characters-in-local.dev",
			"\\start-with-backslash@invalid-characters-in-local.dev",
			"[start-with-braketleft@invalid-characters-in-local.dev",
			"]start-with-braketright@invalid-characters-in-local.dev",
			":start-with-colon@invalid-characters-in-local.dev",
			",start-with-comma@invalid-characters-in-local.dev",
			">start-with-greater@invalid-characters-in-local.dev",
			"<start-with-lesser@invalid-characters-in-local.dev",
			"(start-with-parenleft@invalid-characters-in-local.dev",
			")start-with-parenright@invalid-characters-in-local.dev",
			";start-with-semicolon@invalid-characters-in-local.dev",
			".start-with-dot@invalid-characters-in-local.dev",
			"end-with-backslash\\@invalid-characters-in-local.dev",
			"end-with-braketleft[@invalid-characters-in-local.dev",
			"end-with-braketright]@invalid-characters-in-local.dev",
			"end-with-colon:@invalid-characters-in-local.dev",
			"end-with-comma,@invalid-characters-in-local.dev",
			"end-with-greater>@invalid-characters-in-local.dev",
			"end-with-lesser<@invalid-characters-in-local.dev",
			"end-with-parenleft(@invalid-characters-in-local.dev",
			"end-with-parenright)@invalid-characters-in-local.dev",
			"end-with-semicolon;@invalid-characters-in-local.dev",
			"end-with-dot.@invalid-characters-in-local.dev",
			"user..-with-double-dots@example.com",
			".user-beginning-with-dot@example.com",
			"user-ending-with-dot.@example.com",
			"fully-numeric-tld@example.123",
			// non-ascii
			"test@umläut.com",
		}

		for _, email := range emails {
			t.Run(email, func(t *testing.T) {
				t.Parallel()
				res := emailvalidator.IsValid(email)
				if res {
					t.Errorf("IsValidRFC() = %v, want false", res)
				}
			})
		}
	})
}

func ExampleIsValid() {
	fmt.Println(emailvalidator.IsValid("valid.email@example.com")) // true
	fmt.Println(emailvalidator.IsValid("invalid.@example.com"))    // false
	fmt.Println(emailvalidator.IsValid("user@[127.0.0.1]"))        // true
	fmt.Println(emailvalidator.IsValid("user@123.123.123.123"))    // false
	fmt.Println(emailvalidator.IsValid("user@com"))                // true

	// Output:
	// true
	// false
	// true
	// false
	// true
}
